scale_color_manual(name = "Test", values = c("#0073e6", "#5ba300", "#f57600", "purple")) +
xlab("Resample") +
ylab("Accuracy")
melhor_genes_unique_B <- cbind(indices_10_10000[[167]],indices_10_10000[[800]],indices_10_10000[[2743]],indices_10_10000[[5020]],indices_10_10000[[5450]],indices_10_10000[[7065]])
melhor_genes_unique_B <- as.data.frame(melhor_genes_unique_B)
melhor_genes_unique_B <- unique(c(melhor_genes_unique_B[,1],melhor_genes_unique_B[,2], melhor_genes_unique_B[,3], melhor_genes_unique_B[,4], melhor_genes_unique_B[,5], melhor_genes_unique_B[,6]))
melhor_genes_unique_B
View(indices_10_10000)
indices_10_10000[[167]]
melhor_genes_unique_B <- cbind(indices_10_10000[[166]],indices_10_10000[[799]],indices_10_10000[[2742]],indices_10_10000[[5019]],indices_10_10000[[5449]],indices_10_10000[[7064]])
melhor_genes_unique_B <- as.data.frame(melhor_genes_unique_B)
melhor_genes_unique_B <- unique(c(melhor_genes_unique_B[,1],melhor_genes_unique_B[,2], melhor_genes_unique_B[,3], melhor_genes_unique_B[,4], melhor_genes_unique_B[,5], melhor_genes_unique_B[,6]))
melhor_genes_unique_B
top_genes_B4_2C
melhor_genes_B <- B4[melhor_genes_unique_B,]
samples_B4 <- c("F1B", "F2B", "F3B", "F4B", "S1B", "S2B", "S3B", "S4B", "U1B", "U2B", "U3B", "U4B")
#samples_S4 <- c("F1S", "F2S", "F3S", "F4S", "S1S", "S2S", "S3S", "S4S", "U1S", "U2S", "U3S", "U4S")
# Define a function to extract condition and tissue
condition_map <- c(F = "FLASH", S = "Standard", U = "Untreated")
extract_condition <- function(sample_name) {
condition <- condition_map[substr(sample_name, 1, 1)]
return(paste(condition, sep = ""))
}
condition_B4 <- sapply(samples_B4, extract_condition)
#condition_S4 <- sapply(samples_S4, extract_condition)
directory <- "C:/Users/samel/OneDrive/Trabalho Pesquisa/Pesquisa Cancer HPC - Mestrado/Artigos/Paper Small Data Oxford BioInf/Code/input"
samplesFiles_B4 <- c("F1B.merge.fastq", "F2B.merge.fastq", "F3B.merge.fastq", "F4B.merge.fastq", "S1B.merge.fastq", "S2B.merge.fastq", "S3B.merge.fastq", "S4B.merge.fastq", "U1B.merge.fastq", "U2B.merge.fastq", "U3B.merge.fastq", "U4B.merge.fastq")
#samplesFiles_S4 <- c("F1S.merge.fastq", "F2S.merge.fastq", "F3S.merge.fastq", "F4S.merge.fastq", "S1S.merge.fastq", "S2S.merge.fastq", "S3S.merge.fastq", "S4S.merge.fastq", "U1S.merge.fastq", "U2S.merge.fastq", "U3S.merge.fastq", "U4S.merge.fastq")
sampleTable_B4 <- data.frame(row.names = NULL, sampleName = samples_B4, fileName = samplesFiles_B4, condition = condition_B4, stringsAsFactors = FALSE) # tissue = tissue
#sampleTable_S4 <- data.frame(row.names = NULL, sampleName = samples_S4, fileName = samplesFiles_S4, condition = condition_S4, stringsAsFactors = FALSE) # tissue = tissue
ddsHTSeq_B4 <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable_B4,
directory = directory,
design= ~ condition) #group
ddsHTSeq_B4
#ddsHTSeq_S4 <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable_S4,
#                                         directory = directory,
#                                        design= ~ condition) #group
#ddsHTSeq_S4
#Removing very low counts
smallestGroupSize <- 4 #Ideally the number of smallest samples you have for this condition/group
keep <- rowSums(counts(ddsHTSeq_B4) >= 10) >= smallestGroupSize
ddsHTSeq_B4 <- ddsHTSeq_B4[keep,]
ddsHTSeq_B4
# smallestGroupSize <- 4
# keep <- rowSums(counts(ddsHTSeq_S4) >= 10) >= smallestGroupSize
# ddsHTSeq_S4 <- ddsHTSeq_S4[keep,]
#
# ddsHTSeq_S4
#B4 (with all samples from BONE)
tmm_data_B4 <- count_matrix_B %>% filter(!row_number() %in% 13:24)
#Convert to numeric without losing rownames:
tmm_data_B4 <- data.frame(lapply(tmm_data_B4, function(x) as.numeric(as.character(x))),
check.names=F, row.names = rownames(tmm_data_B4))
tmm_data_B4 <- t(tmm_data_B4)
#colnames(tmm_SF_B_data)
#Rearranging the positions of the columns:
#tmm_SF_B_data <- tmm_SF_B_data[, c(5, 6, 7, 8, 1, 2, 3, 4)]
smallestGroupSize <- 4
keep <- rowSums(tmm_data_B4 >= 10) >= smallestGroupSize
tmm_data_B4 <- tmm_data_B4[keep,]
tmm_data_B4
tmm_B4 <- edgeR::calcNormFactors(tmm_data_B4, method="TMM")
# libsize is the column sum of the raw counts
N_B4 <- colSums(tmm_data_B4) #(vector of library sizes)
# size factor combines libsize with normalization factor into a single value
tmm.counts_B4 <- N_B4*tmm_B4/exp(mean(log(N_B4*tmm_B4)))
#Changing the sizefactor from DESeq2 (RLE) to TMM:
sizeFactors(ddsHTSeq_B4) <- tmm.counts_B4
ddsHTSeq_B4 <- DESeq(ddsHTSeq_B4)
res_B4_SxU <- results(ddsHTSeq_B4, contrast = c("condition", "Standard", "Untreated"), alpha = 0.05)#, alpha = 0.01
res_B4_FxU <- results(ddsHTSeq_B4, contrast = c("condition", "FLASH", "Untreated"), alpha = 0.05)#, alpha = 0.01
res_B4_SxF <- results(ddsHTSeq_B4, contrast = c("condition", "Standard", "FLASH"), alpha = 0.05)#, alpha = 0.01
#Getting the counts of the data that are already normalized (3 Conditions (3C)):
#Rows are GENES!
norm_B4_counts_3C <- counts(ddsHTSeq_B4, normalized=TRUE)
#Now rows are SAMPLES!
trans_norm_B4_counts_3C <- t(norm_B4_counts_3C)
#Same data but with just FLASH and STANDARD (2 Conditions (2C)):
norm_B4_counts <- norm_B4_counts_3C[1:8,]
trans_norm_B4_counts <- trans_norm_B4_counts_3C[1:8,]
loading_scores_B4 <- pca_norm_B4$rotation[,1]
pca_norm_B4 <- prcomp(trans_norm_B4_counts, center = TRUE, scale = FALSE) # center = TRUE ,scale = FALSE
summary(pca_norm_B4)
loading_scores_B4 <- pca_norm_B4$rotation[,1]
gene_scores_B4 <- abs(loading_scores_B4) ## get the magnitudes
gene_score_ranked_PC1_B4 <- sort(gene_scores_B4, decreasing=TRUE)
top_100_genes_PC1_B4 <- names(gene_score_ranked_PC1_B4[1:100])
top_100_genes_PC1_B4 ## show the names of the top 10 genes
pca_norm_B4$rotation[top_100_genes_PC1_B4,1] ## show the scores (and +/- sign)
loading_scores_B4 <- pca_norm_B4$rotation[,2]
gene_scores_B4 <- abs(loading_scores_B4) ## get the magnitudes
gene_score_ranked_PC2_B4 <- sort(gene_scores_B4, decreasing=TRUE)
top_100_genes_PC2_B4 <- names(gene_score_ranked_PC2_B4[1:100])
top_100_genes_PC2_B4 ## show the names of the top 10 genes
pca_norm_B4$rotation[top_100_genes_PC2_B4,2] ## show the scores (and +/- sign)
loading_scores_B4 <- pca_norm_B4$rotation[,3]
gene_scores_B4 <- abs(loading_scores_B4) ## get the magnitudes
gene_score_ranked_PC3_B4 <- sort(gene_scores_B4, decreasing=TRUE)
top_100_genes_PC3_B4 <- names(gene_score_ranked_PC3_B4[1:100])
top_100_genes_PC3_B4 ## show the names of the top 10 genes
pca_norm_B4$rotation[top_100_genes_PC3_B4,3] ## show the scores (and +/- sign)
loading_scores_B4 <- pca_norm_B4$rotation[,4]
gene_scores_B4 <- abs(loading_scores_B4) ## get the magnitudes
gene_score_ranked_PC4_B4 <- sort(gene_scores_B4, decreasing=TRUE)
top_100_genes_PC4_B4 <- names(gene_score_ranked_PC4_B4[1:100])
top_100_genes_PC4_B4 ## show the names of the top 10 genes
pca_norm_B4$rotation[top_100_genes_PC4_B4,4] ## show the scores (and +/- sign)
#Obtendo os genes ?nicos de interesse dentro de lncRNA
top_genes_B4 <- c(top_100_genes_PC1_B4,top_100_genes_PC2_B4,top_100_genes_PC3_B4,top_100_genes_PC4_B4)
top_genes_B4 <- unique(top_genes_B4)
top_genes_B4 <- trans_norm_B4_counts[,top_genes_B4]
top_genes_B4
ML_B4 <- as.data.frame(top_genes_B4) #or norm_B4_counts or raw_B4
ML_B4_F <- ML_B4 %>% filter(!row_number() %in% 5:8) #5:12
ML_B4_S <- ML_B4 %>% filter(!row_number() %in% 1:4) # %>% filter(!row_number() %in% 5:8)
#ML_B4_U <- ML_B4 %>% filter(!row_number() %in% 1:8)
ML_B4_F <- t(ML_B4_F)
ML_B4_F <- as.data.frame(ML_B4_F)
names_F <- c( "F1B" = "B1", "F2B" = "B2", "F3B" = "B3", "F4B" = "B4")
ML_B4_F <- rename(ML_B4_F, all_of(names_F))
names_F <- c( "B1" = "F1B", "B2" = "F2B", "B3" = "F3B", "B4" = "F4B")
ML_B4_F <- rename(ML_B4_F, all_of(names_F))
ML_B4_F
View(ML_B4_F)
View(ML_B4_S)
ML_B4_S <- t(ML_B4_S)
ML_B4_S <- as.data.frame(ML_B4_S)
names_S <-  c( "B1" = "S1B", "B2" = "S2B", "B3" = "S3B", "B4" = "S4B")
ML_B4_S <- rename(ML_B4_S, all_of(names_S))
ML_B4_F <- ML_B4_F %>%
mutate(Condition = "FLASH")
ML_B4_S <- ML_B4_S %>%
mutate(Condition = "STANDARD")
#ML_B4_U <- ML_B4_U %>%
#  mutate(Condition = "UNTREATED")
row_names_B4 <- as.data.frame(rownames(ML_B4_F) )
row_names_B4 <- bind_rows(row_names_B4,row_names_B4)#,row_names_B4
row_names_B4$Genes <- row_names_B4$`rownames(ML_B4_F)`
B4 <- bind_rows(ML_B4_F,ML_B4_S)#,ML_B4_U
B4 <- B4 %>%  mutate(Gene = row_names_B4$Genes)
rownames(B4) <- NULL
B4 <- B4[, c(6, 1, 2, 3, 4, 5)]
B4$Condition <- factor(B4$Condition)
#Using the gene refined after classification: In this case there were 235 genes!
B4_F <- B4[1:235,1:6] #<----- (top 100), B4[1:117,1:6] (top 50),  B4[1:57,1:6] (top 25), B4[1:24,1:6] (top 10),  B4[1:2236,1:6](top 1000), ou B4_top_genes_imp[1:55,1:6] ou B4_all_genes[1:21590,1:6] ou B4[1:2236,1:6] (for top 1000 genes)
data <- B4_F
melhor_genes_unique_B
View(B4)
melhor_genes_B <- B4[melhor_genes_unique_B,]
View(melhor_genes_B)
melhor_genes_B <- melhor_genes_B[[1]]
melhor_genes_B <- top_genes_B4[,melhor_genes_B]
View(melhor_genes_B)
melhor_genes_B[[1]]
melhor_genes_unique_B <- cbind(indices_10_10000[[166]],indices_10_10000[[799]],indices_10_10000[[2742]],indices_10_10000[[5019]],indices_10_10000[[5449]],indices_10_10000[[7064]])
melhor_genes_unique_B <- as.data.frame(melhor_genes_unique_B)
melhor_genes_unique_B <- unique(c(melhor_genes_unique_B[,1],melhor_genes_unique_B[,2], melhor_genes_unique_B[,3], melhor_genes_unique_B[,4], melhor_genes_unique_B[,5], melhor_genes_unique_B[,6]))
melhor_genes_B <- B4[melhor_genes_unique_B,]
melhor_genes_B[[1]]
melhor_genes_B <- top_genes_B4[,melhor_genes_B]
melhor_genes_B <- top_genes_B4[,melhor_genes_B]
melhor_genes_unique_B <- cbind(indices_10_10000[[166]],indices_10_10000[[799]],indices_10_10000[[2742]],indices_10_10000[[5019]],indices_10_10000[[5449]],indices_10_10000[[7064]])
melhor_genes_unique_B <- as.data.frame(melhor_genes_unique_B)
melhor_genes_unique_B <- unique(c(melhor_genes_unique_B[,1],melhor_genes_unique_B[,2], melhor_genes_unique_B[,3], melhor_genes_unique_B[,4], melhor_genes_unique_B[,5], melhor_genes_unique_B[,6]))
melhor_genes_B <- B4[melhor_genes_unique_B,]
melhor_genes_B <- melhor_genes_B[[1]]
melhor_genes_B <- top_genes_B4[,melhor_genes_B]
pca_melhor_B4_2C <- prcomp(melhor_genes_B, center = TRUE, scale = FALSE) # center = TRUE ,scale = FALSE
summary(pca_melhor_B4_2C)
melhor_genes_B
melhor_genes_B <- colnames(melhor_genes_B)
#melhor_genes_50_10000 <- colnames(melhor_genes_50_10000)
melhor_genes_B4 <- sub("\\.\\d+$", "", melhor_genes_B) #melhor_genes_B from Supervised.R
#melhor_genes_50_B4 <- sub("\\.\\d+$", "", melhor_genes_50_10000) #Melhor_genes_10_10000 from Supervised.R
#pior_genes_10_B4 <- sub("\\.\\d+$", "", pior_genes_10_10000) #Melhor_genes_10_10000 from Supervised.R
##------ Preparing the GTF data to get the names for the genes_ids
gtf_data <- gencode.vM35.primary_assembly.annotation #THis is the gtf data uploaded!
# Split the ninth column based on semicolon (;)
gtf_data$split_data <- strsplit(gtf_data[, 9], ";")
# Separate gene_id and gene_name from the split data
gtf_data$gene_id <- sapply(gtf_data$split_data, function(x) x[grepl("gene_id", x)])
gtf_data$gene_name <- sapply(sapply(gtf_data$split_data, function(x) x[grepl("gene_name", x)]), function(x) str_replace_all(x, "gene_name ", ""))
# Clean gene_name (remove extra spaces)
gtf_data$gene_name <- gsub(" +$", "", gtf_data$gene_name)
# Remove the temporary split column
gtf_data <- gtf_data[ , !(names(gtf_data) %in% "split_data")]
GTF_data <- gtf_data[,10:11]
# Remove "gene_id " from the ninth column
GTF_data[, 1] <- gsub("^gene_id ", "", GTF_data[, 1])
#To use later, getting the names of the classification genes:
GTF_data <- unique(GTF_data)
melhor_genes_B_gtf <- GTF_data %>% filter(GTF_data$gene_id %in% melhor_genes_B)
melhor_genes_B_gtf
log2FC_B_SxF <- as.data.frame(res_B4_SxF)
log2FC_B_SxF_filtered <- log2FC_B_SxF %>% filter(log2FoldChange >= 1.5 | log2FoldChange <= -1.5)
log2FC_B_SxF <- log2FC_B_SxF[, c("log2FoldChange", "lfcSE")]
melhor_genes_B <- melhor_genes_B_gtf %>% arrange((gene_id))
log2fc_B <- log2FC_B_SxF %>%
filter(row.names(log2FC_B_SxF) %in% melhor_genes_B$gene_id) %>%
mutate(mycolor= ifelse(log2FoldChange>0, "#positive", "#negative"))
rownames_B_log2fc <- row.names(log2fc_B)
#rownames_B_log2fc <- sub("\\.\\d+$", "", rownames_B_log2fc) #melhor_genes_B from Supervised.R
log2fc_B <- log2fc_B %>%
mutate(gene_id = rownames_B_log2fc) %>%
arrange((gene_id)) %>%
mutate(gene_name = melhor_genes_B$gene_name)
ggplot(log2fc_B) +
geom_hline(yintercept=0, linetype="solid", color = "black", size=0.2) +
geom_segment(aes(x=gene_name, xend=gene_name, y=0, yend=log2FoldChange), color="black") +
geom_point(aes(y = log2FoldChange, x=gene_name, color = mycolor), position="dodge", size = 3) +
#  stat_identity(aes(x =gene_name, y = log2FoldChange, color = mycolor))+
coord_flip() +
scale_y_continuous(limits = c(-3, 3), breaks = seq(-3, 3, 0.5)) +
scale_color_manual(values = c("#f57600", "#0073e6")) +
xlab("") +
ylab("Log2FC")+
theme_bw() +
theme(legend.position = "none")
corr_10_B4 <- top_genes_B4[,melhor_genes_B]
pca_melhor_B4_2C
melhor_genes_B
#Correlation analysis-----------------
corr_10_B4 <- top_genes_B4[,melhor_genes_B]
top_genes_B4
melhor_genes_B
#Correlation analysis-----------------
corr_10_B4 <- top_genes_B4[,melhor_genes_B$gene_id]
corr_10_B4_name <- corr_10_B4 %>%
rename_all(~ melhor_genes_B_gtf$gene_name[match(., melhor_genes_B_gtf$gene_id)])
View(corr_10_B4)
View(top_genes_B4)
View(corr_10_B4)
corr_10_B4_name <- corr_10_B4 %>%
rename_all(~ melhor_genes_B_gtf$gene_name[match(., melhor_genes_B_gtf$gene_id)])
corr_10_B4 %>%
rename_all(~ melhor_genes_B_gtf$gene_name[match(., melhor_genes_B_gtf$gene_id)])
corr_10_B4 <- as.data.frame(corr_10_B4)
corr_10_B4_name <- corr_10_B4 %>%
rename_all(~ melhor_genes_B_gtf$gene_name[match(., melhor_genes_B_gtf$gene_id)])
View(corr_10_B4_name)
corr_10_B4_F <- corr_10_B4[1:4,]
corr_10_B4_S <- corr_10_B4[5:8,]
corr_10_B4_name_F <- corr_10_B4_name[1:4,]
corr_10_B4_name_S <- corr_10_B4_name[5:8,]
correlations_10_B4 <- sapply(1:ncol(corr_10_B4), function(i) cor(corr_10_B4_F[, i], corr_10_B4_S[, i], method = "spearman"))
gene_names_corr_10_B4 <- colnames(corr_10_B4_name)
gene_pairs_corr_10_B4 <- cbind(gene_names_corr_10_B4, correlations_10_B4)
colnames(gene_pairs_corr_10_B4) <- c("Gene", "Correlation")
gene_pairs_corr_10_B4 <- as.data.frame(gene_pairs_corr_10_B4)
gene_pairs_corr_10_B4$Correlation <- as.numeric(gene_pairs_corr_10_B4$Correlation)
gene_pairs_corr_10_B4 <- gene_pairs_corr_10_B4 %>%
mutate(mycolor= ifelse(Correlation>0, "#0073e6", "#f57600")) %>%
arrange(Correlation)  %>%   # First sort by val. This sort the dataframe but NOT the factor levels
mutate(Gene=factor(Gene, levels=Gene))# This trick update the factor levels
ggplot(gene_pairs_corr_10_B4, aes(x=Gene, y=Correlation)) +
geom_bar(stat = "identity", position = "dodge", colour = gene_pairs_corr_10_B4$mycolor, fill = gene_pairs_corr_10_B4$mycolor, width = 0.7) +
coord_flip() +
#Above 0.7 starts a very strong relationship!!!!
geom_hline(yintercept=0.7, linetype="dashed", color = "#0073e6", size=1) +
geom_hline(yintercept=-0.7, linetype="dashed", color = "#f57600", size=1) +
theme_bw()
#------------ Correlation between GENES for each condition
# Assuming 'gene_expression_data' is your matrix or data frame
correlation_matrix_10_B4 <- cor(corr_10_B4)
View(correlation_matrix_10_B4)
correlation_matrix_10_B4_F <- cor(corr_10_B4_F)
colnames(correlation_matrix_10_B4_F) <- colnames(corr_10_B4_name)
rownames(correlation_matrix_10_B4_F) <- colnames(corr_10_B4_name)
correlation_matrix_10_B4_S <- cor(corr_10_B4_S)
colnames(correlation_matrix_10_B4_S) <- colnames(corr_10_B4_name)
rownames(correlation_matrix_10_B4_S) <- colnames(corr_10_B4_name)
View(correlation_matrix_10_B4_F)
View(correlation_matrix_10_B4)
View(correlation_matrix_10_B4_S)
cor_diff_B4 <- abs(correlation_matrix_10_B4_F - correlation_matrix_10_B4_S)
corrplot(correlation_matrix_10_S4_F, method = "color", col=colorRampPalette(c("#f57600","white","#0073e6"))(100), type = "lower", tl.cex = 0.5, tl.col="black", number.cex = 0.5, order = "AOE") #To add values inside: addCoef.col = "black", #For significance: p.mat = cor_test_S4_F$p, sig.level = 0.05,
corrplot(correlation_matrix_10_B4_F, method = "color", col=colorRampPalette(c("#f57600","white","#0073e6"))(100), type = "lower", tl.cex = 0.5, tl.col="black", number.cex = 0.5, order = "AOE") #To add values inside: addCoef.col = "black", #For significance: p.mat = cor_test_S4_F$p, sig.level = 0.05,
corrplot(correlation_matrix_10_B4_S, method = "color", col=colorRampPalette(c("#f57600","white","#0073e6"))(100), type = "lower", tl.cex = 0.5, tl.col="black", number.cex = 0.5, order = "AOE") #To add values inside: addCoef.col = "black", #For significance: p.mat = cor_test_S4_F$p, sig.level = 0.05,
corrplot(correlation_matrix_10_B4_S, method = "color", col=colorRampPalette(c("#f57600","white","#0073e6"))(100), type = "lower", tl.cex = 0.5, tl.col="black", number.cex = 0.5, order = "AOE") #To add values inside: addCoef.col = "black", #For significance: p.mat = cor_test_S4_F$p, sig.level = 0.05,
ggplot(acc_B_col_chosen) +
facet_wrap(~Size, nrow = 1) +
geom_segment(data = acc_B_range_chosen, aes(x=boot, xend=boot, y=acc_min, yend=acc_max), color="lightgrey") +
geom_point(aes(y = acc_teste, x=boot, color = cols), position="dodge") +
geom_hline(yintercept=0.7, linetype="dashed", color = "black", size=0.5) +
stat_identity(aes(y = mean_acc_test, x=boot), geom="line", position="dodge", color = "black", alpha=0.5) + #size=0.5, shape="triangle"
coord_cartesian(ylim=c(0.1, 1)) +
#coord_cartesian(xlim=c(1, 10)) +
scale_y_continuous(limits = c(0.1, 1), breaks = seq(0.1, 1, 0.1)) +
theme_bw() +
theme(legend.position="bottom") +
scale_color_manual(name = "Test", values = c("#0073e6", "#5ba300", "#f57600", "purple")) +
xlab("Resample") +
ylab("Accuracy")
View(correlation_matrix_10_B4_F)
View(correlation_matrix_10_B4_S)
cor_diff_B4 <- abs(correlation_matrix_10_B4_F - correlation_matrix_10_B4_S)
pheatmap(cor_diff_B4, breaks = c(0,0.5,1,1.5,2), col = colorRampPalette(c("#fffd8d", "yellow", "red"))(4), na.rm = TRUE)
# Create a correlation heatmap with order parameter using known AOE method
corrplot(correlation_matrix_10_B4_S, method = "color", col=colorRampPalette(c("#f57600","white","#0073e6"))(100), type = "lower", tl.cex = 0.5, tl.col="black", number.cex = 0.5, order = "original") #To add values inside: addCoef.col = "black", #For significance: p.mat = cor_test_S4_F$p, sig.level = 0.05,
# Create a correlation heatmap with order parameter using known AOE method
corrplot(correlation_matrix_10_B4_S, method = "color", col=colorRampPalette(c("#f57600","white","#0073e6"))(100), type = "lower", tl.cex = 0.5, tl.col="black", number.cex = 0.5, order = "AOE") #To add values inside: addCoef.col = "black", #For significance: p.mat = cor_test_S4_F$p, sig.level = 0.05,
pheatmap(cor_diff_B4, col = heat.colors(4), na.rm = TRUE)
pheatmap(cor_diff_B4, breaks = c(0,0.5,1,1.5,2), col = colorRampPalette(c("#fffd8d", "yellow", "red"))(4), na.rm = TRUE)
indices_cor_B4 <- which(!is.na(cor_diff_B4), arr.ind = TRUE)
result_table_cor_B4 <- data.frame(
Gene1 = rownames(cor_diff_B4)[indices_cor_B4[, 1]],
Gene2 = colnames(cor_diff_B4)[indices_cor_B4[, 2]],
Difference = cor_diff_B4[indices_cor_B4]
)
View(result_table_cor_B4)
ggplot(result_table_cor_B4, aes(x=Gene1, y=Gene2, fill=Difference)) +
geom_tile() +
scale_fill_gradient2(low = "#fffd8d", mid = "yellow", high = "red") +
#scale_fill_gradientn(colors = hcl.colors(20, "YlOrRd")) +
theme_bw() +
theme(legend.position = "bottom")
corr_10_B4_name_F
transactions_B4_F <- as(corr_10_B4_name_F, "transactions") #Use for gene names: corr_10_B4_name_F
dim(transactions_B4_F) #We have A transactions (baskets) x B items in each basket
itemLabels(transactions_B4_F) #The genes in each basket
#max(corr_10_B4_F$ENSMUSG00000061315.15)
#min(corr_10_B4_F$ENSMUSG00000061315.15)
summary(transactions_B4_F)
#Showing the ocorrence of the genes in each sample:
#We can see the level of each gene, each sample presents:
image(transactions_B4_F)
itemFrequencyPlot(transactions_B4_F, topN=10,  cex.names=0.5, mai = c(2, 1, 0.5, 0))
rules_B4_F <- apriori(transactions_B4_F, parameter = list(supp=0.5, conf=0.8, minlen=2, maxlen=10, target= "rules"))#, algorithm = "fpgrowth"
#fpgrowth_B4_F <- arules::fim4r(transactions_B4_F, method = "fpgrowth", target = "rules", supp = 0.5, conf = 0.8, zmin = 2, zmax = 10)
summary(rules_B4_F)
rules_B4_F <- rules_B4_F[!is.redundant(rules_B4_F)]   #from almost 700 thousand to 500 rules
rules_B4_F
rules_B4_F <- rules_B4_F[!is.significant(rules_B4_F,
transactions_B4_F,
method = "fisher",
adjust = 'bonferroni')]
#
rules_B4_F
# Inspect the rules
inspect(rules_B4_F)
rules_B4_F_df <- DATAFRAME(rules_B4_F, setStart='', setEnd='', separate = TRUE)
#Function plot of the package arulezviz
#Scatterplot, however for no variation in parameters it doesnt help us
plot(rules_B4_F)
#Interactive plot of the rules
plot(rules_B4_F, engine = "plotly")
plot(rules_B4_F, method = "graph",  engine = "htmlwidget", max = 600)
plot(rules_B4_F, method = "grouped matrix", measure = "support", shading = "lift", control = list(k = 50), rhs_max	 =  50, main = NULL, col = "#0073e6")
plot(rules_B4_F, method = "matrix", reorder = "measure")
transactions_B4_S <- as(corr_10_B4_name_S, "transactions")
dim(transactions_B4_S) #We have A transactions (baskets) x B items in each basket
itemLabels(transactions_B4_S) #The genes in each basket
#max(corr_10_B4_F$ENSMUSG00000061315.15)
#min(corr_10_B4_F$ENSMUSG00000061315.15)
summary(transactions_B4_S)
#Showing the ocorrence of the genes in each sample:
#We can see the level of each gene, each sample presents:
image(transactions_B4_S)
#Display the relative item frequency:
itemFrequencyPlot(transactions_B4_S, topN=10,  cex.names=0.45, mai = c(1, 1, 1, 1))
# Mine association rules with minimum support of 0.5 and minimum confidence of 0.8
rules_B4_S <- apriori(transactions_B4_S, parameter = list(supp=0.5, conf=0.8,  minlen=2, maxlen=10, target= "rules"))
#fpgrowth_B4_S <- fim4r(transactions_B4_S, method = "fpgrowth", target = "rules", supp = 10, conf = 10)
summary(rules_B4_S)
#Removing redundant rules:
rules_B4_S <- rules_B4_S[!is.redundant(rules_B4_S)]   #from almost 700 thousand to 500 rules
#fpgrowth_B4_F <- fpgrowth_B4_F[!is.redundant(fpgrowth_B4_F)]   #from almost 800 thousand to 500 rules
#Still a lot of rules:
#Removing statistically insignificant rules:
rules_B4_S <- rules_B4_S[!is.significant(rules_B4_S,
transactions_B4_S,
method = "fisher",
adjust = 'bonferroni')]
summary(rules_B4_S)
# Inspect the rules
inspect(rules_B4_S)
#inspect(fpgrowth_B4_F)
#Turning in to dataframes:
rules_B4_S_df <- DATAFRAME(rules_B4_S, setStart='', setEnd='', separate = TRUE)
#fpgrowth_B4_F_df <- DATAFRAME(fpgrowth_B4_F, setStart='', setEnd='', separate = TRUE)
plot(rules_B4_S)
#Interactive plot of the rules
plot(rules_B4_S, engine = "plotly")
#Interactive plot of the rules. INTERACTIVE, nice!
plot(rules_B4_S, engine = "plotly")
plot(rules_B4_S, method = "graph",  engine = "htmlwidget", max = 600)
plot(rules_B4_S, method = "grouped matrix", measure = "support", shading = "lift", control = list(k = 50), rhs_max	 =  50, main = NULL, col = "#0073e6")
gene_rules_B4_F <- rules_B4_F_df
gene_rules_B4_F$LHS <- gsub("\\=.*", "", gene_rules_B4_F$LHS)
gene_rules_B4_F$RHS <- gsub("\\=.*", "", gene_rules_B4_F$RHS)
gene_rules_B4_S <- rules_B4_S_df
gene_rules_B4_S$LHS <- gsub("\\=.*", "", gene_rules_B4_S$LHS)
gene_rules_B4_S$RHS <- gsub("\\=.*", "", gene_rules_B4_S$RHS)
gene_rules_S4_F <- rules_S4_F_df
gene_rules_B4_F <- rules_B4_F_df
gene_rules_B4_F$LHS <- gsub("\\=.*", "", gene_rules_B4_F$LHS)
gene_rules_B4_F$RHS <- gsub("\\=.*", "", gene_rules_B4_F$RHS)
gene_rules_B4_S <- rules_B4_S_df
gene_rules_B4_S$LHS <- gsub("\\=.*", "", gene_rules_B4_S$LHS)
gene_rules_B4_S$RHS <- gsub("\\=.*", "", gene_rules_B4_S$RHS)
intersect_gene_rules_B4 <- intersect(gene_rules_B4_F, gene_rules_B4_S)
unique_gene_rules_B4_F <- setdiff(gene_rules_B4_F, gene_rules_B4_S) #For FLASH only
unique_gene_rules_B4_S <- setdiff(gene_rules_B4_S, gene_rules_B4_F) #For STANDARD only
intersect_gene_rules_B4 <- intersect_gene_rules_B4[,1:2]
unique_gene_rules_B4_F <- unique_gene_rules_B4_F[,1:2]
unique_gene_rules_B4_S <- unique_gene_rules_B4_S[,1:2]
graph_gene_rules_B4 <- graph_from_data_frame(intersect_gene_rules_B4, directed = TRUE)
library("igraph")
graph_gene_rules_B4 <- graph_from_data_frame(intersect_gene_rules_B4, directed = TRUE)
com_B4_intersect <- cluster_walktrap(graph_gene_rules_B4)
membership <- membership(com_B4_intersect)
# Add the cluster membership as a new column to the data frame
intersect_gene_rules_B4$grp <- membership[V(graph_gene_rules_B4)$name]
# Get unique group IDs
unique_groups_intersect_B4 <- unique(intersect_gene_rules_B4$grp)
# Create a color palette
mycolor <- brewer.pal(n = length(unique_groups_intersect_B4), name = "Paired")
# Assign colors to nodes based on their group membership
V(graph_gene_rules_B4)$color <- mycolor[membership]
ggraph(graph_gene_rules_B4, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(size=5, color=as.factor(color), fill=color), alpha=0.5) +
scale_size_continuous(range=c(0.5,8)) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -0.3, size=2.3) +
theme_void() +
theme(legend.position="none",
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2))
#Arc diagram
library("ggraph")
ggraph(graph_gene_rules_B4, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(size=5, color=as.factor(color), fill=color), alpha=0.5) +
scale_size_continuous(range=c(0.5,8)) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -0.3, size=2.3) +
theme_void() +
theme(legend.position="none",
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2))
graph_unique_gene_rules_B4_F <- graph_from_data_frame(unique_gene_rules_B4_F, directed = TRUE)
# Get the cluster memberships
com_B4_unique_F <- cluster_walktrap(graph_unique_gene_rules_B4_F)
membership_B4_F <- membership(com_B4_unique_F)
membership_B4_F <- membership_B4_F[order(membership_B4_F)]
#Reorder dataset and make the graph
unique_gene_rules_B4_F <- unique_gene_rules_B4_F %>%
arrange(match(LHS, names(membership_B4_F))) %>%
mutate(LHS=factor(LHS))
# Create a graph from the data frame (Unique for FLASH)
graph_unique_gene_rules_B4_F <- graph_from_data_frame(unique_gene_rules_B4_F, directed = TRUE)
# Get the cluster memberships
com_B4_unique_F <- cluster_walktrap(graph_unique_gene_rules_B4_F)
membership_B4_F <- membership(com_B4_unique_F)
# Add the cluster membership as a new column to the data frame
#unique_gene_rules_B4_F$grp <- membership_B4_F[V(graph_unique_gene_rules_B4_F)$name]
# Get unique group IDs
unique_groups_unique_B4_F <- unique(membership_B4_F)
# Create a color palette
mycolor <- brewer.pal(n = length(unique_groups_unique_B4_F), name = "Paired")
# Assign colors to nodes based on their group membership
V(graph_unique_gene_rules_B4_F)$color <- mycolor[membership_B4_F]
#Arc diagram
ggraph(graph_unique_gene_rules_B4_F, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(size=5, color=as.factor(color), fill=color), alpha=0.5) +
scale_size_continuous(range=c(0.5,8)) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -0.3, size=2.3) +
theme_void() +
theme(legend.position="none",
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2))
graph_unique_gene_rules_B4_S <- graph_from_data_frame(unique_gene_rules_B4_S, directed = TRUE)
# Get the cluster memberships
com_B4_unique_S <- cluster_walktrap(graph_unique_gene_rules_B4_S)
membership_B4_S <- membership(com_B4_unique_S)
membership_B4_S <- membership_B4_S[order(membership_B4_S)]
#Reorder dataset and make the graph
unique_gene_rules_B4_S <- unique_gene_rules_B4_S %>%
arrange(match(LHS, names(membership_B4_S))) %>%
mutate(LHS=factor(LHS))
# Create a graph from the data frame (Unique for FLASH)
graph_unique_gene_rules_B4_S <- graph_from_data_frame(unique_gene_rules_B4_S, directed = TRUE)
# Get the cluster memberships
com_B4_unique_S <- cluster_walktrap(graph_unique_gene_rules_B4_S)
membership_B4_S <- membership(com_B4_unique_S)
# Add the cluster membership as a new column to the data frame
#unique_gene_rules_B4_S$grp <- membership_B4_S[V(graph_unique_gene_rules_B4_S)$name]
# Get unique group IDs
unique_groups_unique_B4_S <- unique(membership_B4_S)
# Create a color palette
mycolor <- brewer.pal(n = length(unique_groups_unique_B4_S), name = "Paired")
# Assign colors to nodes based on their group membership
V(graph_unique_gene_rules_B4_S)$color <- mycolor[membership_B4_S]
#Arc diagram
ggraph(graph_unique_gene_rules_B4_S, layout="linear") +
geom_edge_arc(edge_colour="black", edge_alpha=0.2, edge_width=0.3, fold=TRUE) +
geom_node_point(aes(size=5, color=as.factor(color), fill=color), alpha=0.5) +
scale_size_continuous(range=c(0.5,8)) +
scale_color_manual(values=mycolor) +
geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -0.3, size=2.3) +
theme_void() +
theme(legend.position="none",
plot.margin=unit(c(0,0,0.4,0), "null"),
panel.spacing=unit(c(0,0,3.4,0), "null")) +
expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2))
View(B4)
