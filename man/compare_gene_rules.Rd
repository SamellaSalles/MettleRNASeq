% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compare_gene_rules.R
\name{compare_gene_rules}
\alias{compare_gene_rules}
\title{Compare Gene Association Rules Between Two Conditions}
\usage{
compare_gene_rules(
  rules_df1,
  rules_df2,
  condition_names = c("Condition1", "Condition2"),
  plot = TRUE
)
}
\arguments{
\item{rules_df1}{A data frame of association rules from condition 1. Must contain columns \code{LHS} and \code{RHS}.}

\item{rules_df2}{A data frame of association rules from condition 2. Must contain columns \code{LHS} and \code{RHS}.}

\item{condition_names}{A character vector of length 2 indicating the names of the two conditions. Defaults to \code{c("Condition1", "Condition2")}.}

\item{plot}{Logical; if \code{TRUE}, plots the shared and unique rule graphs. Default is \code{TRUE}.}

\item{layout_type}{A character string indicating the layout for plotting. Use \code{"linear"} for arc diagrams (default) or \code{"fr"} for Fruchterman-Reingold force-directed layout.}
}
\value{
A list with the following components:
\describe{
\item{shared_rules}{A data frame of rules common to both conditions.}
\item{unique_rules_condition1}{Rules unique to condition 1.}
\item{unique_rules_condition2}{Rules unique to condition 2.}
\item{clusters}{A list of data frames containing gene-to-cluster mappings for shared and unique rules.}
\item{plots}{A list of \code{ggplot} objects for shared and unique rule graphs.}
}
}
\description{
This function compares two sets of gene association rules (as data frames),
identifies shared and unique rules, clusters them, and visualizes them as arc
or force-directed diagrams using \code{ggraph}. It also returns the rule data and
cluster membership information for further analysis.
}
\examples{
\dontrun{
data <- matrix(rnorm(80), nrow=8, ncol=10)
colnames(data) <- paste0("Gene_", 1:10)
result <- mine_gene_associations(data, 1:4)
result_x <- mine_gene_associations(data, 5:8)
compare_gene_rules(rules_df1 = result$rules_df, rules_df2 = result_x$rules_df,
                   condition_names = c("F", "S"), plot = TRUE)
}

}
