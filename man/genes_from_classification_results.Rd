% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/genes_from_classification_results.R
\name{genes_from_classification_results}
\alias{genes_from_classification_results}
\title{Select Genes Based on Classification Results and Visualize Accuracy}
\usage{
genes_from_classification_results(
  eval_table,
  genes_table,
  count_matrix,
  resamples = NULL,
  cutoff = NULL,
  metric_column = "summary_test_accuracy",
  selection_mode = "unique",
  partition_table = NULL,
  plot_type = "summary",
  plot_resamples_only = TRUE,
  return_plot = TRUE,
  hline_yintercept = 0.7,
  hline_color = "black",
  median_color = "#f57600",
  test_colors = NULL,
  show_legend = TRUE
)
}
\arguments{
\item{eval_table}{A data frame returned from the classification function, containing evaluation metrics
for each resample and data split.}

\item{genes_table}{A data frame (output of the classification function) containing the gene positions
used in each resample, named like \code{"Resample_1"}, \code{"Resample_2"}, etc.}

\item{count_matrix}{A count matrix with genes in the columns. This will be filtered to keep only
the selected gene columns.}

\item{resamples}{Optional vector of resample IDs to select (e.g., \code{c(1, 3, 5)}). If NULL, \code{cutoff}
will be used.}

\item{cutoff}{Optional numeric value used to filter resamples based on the specified \code{metric_column}.
Only one of \code{resamples} or \code{cutoff} is required.}

\item{metric_column}{Character. The name of the metric column to use for filtering resamples when \code{cutoff}
is provided. Typically "summary_test_accuracy" or "test_accuracy".}

\item{selection_mode}{Either \code{"unique"} to take the union of selected genes across resamples,
or \code{"intersect"} to take only the genes common to all selected resamples.}

\item{partition_table}{Optional data frame returned by the classification function, showing
which replicates were used in each data split (used for coloring test accuracy points).}

\item{plot_type}{Type of accuracy plot to generate. Options are:
\code{"summary"} (median/mean test accuracy),
\code{"all"} (individual test accuracies),
or \code{"both"} (both overlays).}

\item{plot_resamples_only}{Logical. If TRUE (default), only the selected resamples are plotted.
If FALSE, all resamples from \code{eval_table} are shown.}

\item{return_plot}{Logical. If TRUE (default), displays and returns the ggplot object.}

\item{hline_yintercept}{Numeric value for drawing a horizontal threshold line (e.g., accuracy = 0.7).}

\item{hline_color}{Color of the horizontal reference line (default = "black").}

\item{median_color}{Color used for the median/mean accuracy line and points (default = "#f57600").}

\item{test_colors}{Optional named vector of colors to manually assign colors to test accuracy points,
based on the partitions (Train/Test splits).}

\item{show_legend}{Logical. Whether to show the plot legend (default = TRUE).}
}
\value{
A list with:
\itemize{
\item \code{selected_resamples}: The resamples used to select genes.
\item \code{selected_gene_positions}: The positions of the selected genes (column indices of \code{count_matrix}).
\item \code{filtered_matrix}: A filtered count matrix (as a \code{data.frame}) containing only the selected genes.
\item \code{plot}: The \code{ggplot2} object generated (or NULL if \code{return_plot = FALSE}).
}
}
\description{
This function filters genes from a count matrix based on resamples selected from classification results
(\code{eval_table}) using a specified accuracy metric or vector of resample IDs. It also provides a customizable
accuracy plot showing test and/or summary performance across resamples.
}
\examples{
\dontrun{
result <- genes_from_classification_results(
  eval_table = classification$eval_table,
  genes_table = classification$genes_table,
  count_matrix = my_counts,
  partition_table = classification$partition_table,
  cutoff = 0.6,
  metric_column = "summary_test_accuracy",
  selection_mode = "unique",
  plot_type = "both",
  plot_resamples_only = TRUE,
  hline_yintercept = 0.7,
  median_color = "#f57600",
  test_colors = c("#f57600", "green", "red", "purple"))
)
}

}
